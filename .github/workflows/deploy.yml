name: Deploy

on:
  release:
    types: [published]
  push:
    branches:
      - master

env:
  ENV_CLIENT_SERVER_API_ENDPOINT: /api
  ENV_SERVER_NODE_ENV: production
  ENV_SERVER_PORT: 3000
  ENV_SERVER_RATE_LIMITER_LIMIT: 10
  ENV_SERVER_RATE_LIMITER_TTL: 60
  ENV_SERVER_TZ: UTC

jobs:
  deploy:
    name: Deploy to remote server
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Configure SSH Key
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.HOST_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.HOST_IP_ADDRESS }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: SSH into Remote Server and Pull Repository
        run: |
          echo "*******************************"
          echo "Deployment process has STARTED"
          echo "*******************************"
          ssh -i ~/.ssh/id_rsa ${{ secrets.HOST_USERNAME }}@${{ secrets.HOST_IP_ADDRESS }} << EOF
            cd russian-vocabulary-flash-cards/
            docker-compose down
            git pull origin master
            git submodule update --recursive --remote
            echo "***************************"
            echo "Creating MAIN .env file ..."
            echo "***************************"
            [ -e .env ] && rm .env
            echo "POSTGRES_USER=${{ secrets.ENV_MAIN_POSTGRES_USER }}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.ENV_MAIN_POSTGRES_PASSWORD }}" >> .env
            echo "POSTGRES_DB=${{ secrets.ENV_MAIN_POSTGRES_DB }}" >> .env
            echo "*****************************"
            echo "Creating SERVER .env file ..."
            echo "*****************************"
            cd russian-vocabulary-flash-cards-server/
            [ -e .env ] && rm .env
            echo "NODE_ENV=${{ env.ENV_SERVER_NODE_ENV }}" >> .env
            echo "PORT=${{ env.ENV_SERVER_PORT }}" >> .env
            echo "TZ=${{ env.ENV_SERVER_TZ }}" >> .env
            echo "DB_HOST=${{ secrets.ENV_SERVER_DB_HOST }}" >> .env
            echo "DB_PORT=${{ secrets.ENV_SERVER_DB_PORT }}" >> .env
            echo "DB_USERNAME=${{ secrets.ENV_MAIN_POSTGRES_USER }}" >> .env
            echo "DB_PASSWORD=${{ secrets.ENV_MAIN_POSTGRES_PASSWORD }}" >> .env
            echo "DB_NAME=${{ secrets.ENV_MAIN_POSTGRES_DB }}" >> .env
            echo "FIREBASE_PROJECT_ID=${{ secrets.ENV_SERVER_FIREBASE_PROJECT_ID }}" >> .env
            echo "FIREBASE_PRIVATE_KEY=${{ secrets.ENV_SERVER_FIREBASE_PRIVATE_KEY }}" >> .env
            echo "FIREBASE_CLIENT_EMAIL=${{ secrets.ENV_SERVER_FIREBASE_CLIENT_EMAIL }}" >> .env
            echo "RATE_LIMITER_TTL=${{ env.ENV_SERVER_RATE_LIMITER_TTL }}" >> .env
            echo "RATE_LIMITER_LIMIT=${{ env.ENV_SERVER_RATE_LIMITER_LIMIT }}" >> .env
            echo "*****************************"
            echo "Creating CLIENT .env file ..."
            echo "*****************************"
            cd ..
            cd russian-vocabulary-flash-cards-client/
            [ -e .env ] && rm .env
            echo "FIREBASE_API_KEY=${{ secrets.ENV_CLIENT_FIREBASE_API_KEY }}" >> .env
            echo "FIREBASE_AUTH_DOMAIN=${{ secrets.ENV_CLIENT_FIREBASE_AUTH_DOMAIN }}" >> .env
            echo "FIREBASE_PROJECT_ID=${{ secrets.ENV_CLIENT_FIREBASE_PROJECT_ID }}" >> .env
            echo "FIREBASE_STORAGE_BUCKET=${{ secrets.ENV_CLIENT_FIREBASE_STORAGE_BUCKET }}" >> .env
            echo "FIREBASE_MESSAGING_SENDER_ID=${{ secrets.ENV_CLIENT_FIREBASE_MESSAGING_SENDER_ID }}" >> .env
            echo "FIREBASE_API_ID=${{ secrets.ENV_CLIENT_FIREBASE_API_ID }}" >> .env
            echo "FIREBASE_MEASUREMENT_ID=${{ secrets.ENV_CLIENT_FIREBASE_MEASUREMENT_ID }}" >> .env
            echo "SERVER_API_ENDPOINT=${{ env.ENV_CLIENT_SERVER_API_ENDPOINT }}" >> .env
            docker-compose up --build --detach
            sleep 30s
            echo "docker ps"
            echo "${docker ps}"
            echo "docker ps -aqf"
            echo "${docker ps -aqf}"
            echo "docker ps -aqf "name=russian-vocabulary-flash-cards_server""
            echo "${docker ps -aqf "name=russian-vocabulary-flash-cards_server"}"
            docker exec -it $(docker ps -aqf "name=russian-vocabulary-flash-cards_server") /bin/bash
            yarn db:migration:run && exit
          EOF
          echo "****************************"
          echo "Deployment process has ENDED"
          echo "****************************"
